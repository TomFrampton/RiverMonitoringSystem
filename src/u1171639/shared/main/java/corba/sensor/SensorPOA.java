package u1171639.shared.main.java.corba.sensor;


/**
* u1171639/shared/main/java/corba/sensor/SensorPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from Sensor.idl
* Friday, 15 May 2015 00:04:28 o'clock BST
*/

public abstract class SensorPOA extends org.omg.PortableServer.Servant
 implements u1171639.shared.main.java.corba.sensor.SensorOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("isAlarmRaised", new java.lang.Integer (0));
    _methods.put ("activate", new java.lang.Integer (1));
    _methods.put ("deactivate", new java.lang.Integer (2));
    _methods.put ("isActive", new java.lang.Integer (3));
    _methods.put ("getThreshold", new java.lang.Integer (4));
    _methods.put ("setThreshold", new java.lang.Integer (5));
    _methods.put ("getReading", new java.lang.Integer (6));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // sensor/Sensor/isAlarmRaised
       {
         boolean $result = false;
         $result = this.isAlarmRaised ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 1:  // sensor/Sensor/activate
       {
         boolean $result = false;
         $result = this.activate ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 2:  // sensor/Sensor/deactivate
       {
         boolean $result = false;
         $result = this.deactivate ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 3:  // sensor/Sensor/isActive
       {
         boolean $result = false;
         $result = this.isActive ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 4:  // sensor/Sensor/getThreshold
       {
         double $result = (double)0;
         $result = this.getThreshold ();
         out = $rh.createReply();
         out.write_double ($result);
         break;
       }

       case 5:  // sensor/Sensor/setThreshold
       {
         double threshold = in.read_double ();
         boolean $result = false;
         $result = this.setThreshold (threshold);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 6:  // sensor/Sensor/getReading
       {
         double $result = (double)0;
         $result = this.getReading ();
         out = $rh.createReply();
         out.write_double ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:sensor/Sensor:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Sensor _this() 
  {
    return SensorHelper.narrow(
    super._this_object());
  }

  public Sensor _this(org.omg.CORBA.ORB orb) 
  {
    return SensorHelper.narrow(
    super._this_object(orb));
  }


} // class SensorPOA
